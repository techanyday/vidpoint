import os
from datetime import datetime
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def export_to_word(content: str, content_type: str, title: str = None) -> str:
    """Export content to a Word document."""
    try:
        # Create a new document
        doc = Document()
        
        # Add title with formatting
        if title:
            # Add company name
            header = doc.add_paragraph()
            company_name = header.add_run("VidPoint")
            company_name.font.size = Pt(12)
            company_name.font.color.rgb = RGBColor(100, 100, 100)
            header.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            
            # Add main title
            title_paragraph = doc.add_paragraph()
            title_run = title_paragraph.add_run(title)
            title_run.font.size = Pt(18)
            title_run.font.bold = True
            title_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Add date
            date_paragraph = doc.add_paragraph()
            date_run = date_paragraph.add_run(datetime.now().strftime("%B %d, %Y"))
            date_run.font.size = Pt(10)
            date_run.font.color.rgb = RGBColor(100, 100, 100)
            date_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Add separator
            doc.add_paragraph("_" * 50).alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph()  # Add space after separator
        
        # Add content based on type
        if content_type == "transcript":
            # Add transcript as paragraphs
            for paragraph in content.split('\n\n'):
                if paragraph.strip():
                    p = doc.add_paragraph()
                    p.add_run(paragraph.strip())
                    p.paragraph_format.space_after = Pt(12)
                    
        elif content_type == "key_points":
            # Add key points as bullet points
            for point in content:
                p = doc.add_paragraph(style='List Bullet')
                p.add_run(point)
                p.paragraph_format.space_after = Pt(12)
                p.paragraph_format.left_indent = Inches(0.25)
                
        else:  # summary
            # Add summary as a single paragraph
            p = doc.add_paragraph()
            p.add_run(content)
            p.paragraph_format.space_after = Pt(12)
        
        # Add footer
        doc.add_paragraph()
        footer = doc.add_paragraph()
        footer_text = footer.add_run("Generated by VidPoint")
        footer_text.font.size = Pt(8)
        footer_text.font.color.rgb = RGBColor(150, 150, 150)
        footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Save document
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"vidpoint_{content_type}_{timestamp}.docx"
        filepath = os.path.join("exports", filename)
        
        # Create exports directory if it doesn't exist
        os.makedirs("exports", exist_ok=True)
        
        doc.save(filepath)
        return filepath
        
    except Exception as e:
        logger.error(f"Error exporting to Word: {str(e)}")
        return None

def export_to_pdf(content: str, content_type: str, title: str = None) -> str:
    """Export content to a PDF document."""
    try:
        # First export to Word
        word_path = export_to_word(content, content_type, title)
        if not word_path:
            raise Exception("Failed to create Word document")
            
        # Convert Word to PDF
        pdf_path = word_path.replace('.docx', '.pdf')
        
        # Use a PDF conversion library here
        # For now, we'll just use the Word document
        return word_path
        
    except Exception as e:
        logger.error(f"Error exporting to PDF: {str(e)}")
        return None
